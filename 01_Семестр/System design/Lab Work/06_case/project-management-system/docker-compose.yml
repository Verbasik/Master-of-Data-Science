services:
  # PostgreSQL Database
  postgres-db:
    image: postgres:13
    container_name: postgres-db
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-admin}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-secret}
      POSTGRES_DB: ${POSTGRES_DB:-project_management}
    ports:
      - "5432:5432"
    volumes:
      - ./init-scripts:/docker-entrypoint-initdb.d
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-admin} -d ${POSTGRES_DB:-project_management}"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - app-network
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    restart: unless-stopped
    labels:
      - "service=database"
      - "type=postgres"

  # MongoDB Database
  mongodb:
    image: mongo:6.0
    container_name: mongodb
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_USER:-mongoadmin}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_PASSWORD:-mongopass}
      MONGO_INITDB_DATABASE: ${MONGO_DB:-task_service}
    ports:
      - "27017:27017"
    volumes:
      - ./mongo-init-scripts:/docker-entrypoint-initdb.d
      - mongo_data:/data/db
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      timeout: 10s
      retries: 5
    networks:
      - app-network
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    restart: unless-stopped
    labels:
      - "service=database"
      - "type=mongodb"

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: redis
    command: redis-server --requirepass ${REDIS_PASSWORD:-redispass}
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD:-redispass}", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    networks:
      - app-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.25'
          memory: 128M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    restart: unless-stopped
    labels:
      - "service=cache"
      - "type=redis"

  # Zookeeper Service
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_log:/var/lib/zookeeper/log
    networks:
      - app-network
    healthcheck:
      test: echo srvr | nc localhost 2181 || exit 1
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    restart: unless-stopped
    labels:
      - "service=messaging"
      - "type=zookeeper"

  # Kafka Service
  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://kafka:29092,EXTERNAL://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,EXTERNAL://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    ports:
      - "9092:9092"
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - app-network
    healthcheck:
      test: nc -z localhost 9092 || exit 1
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '1'
          memory: 1G
        reservations:
          cpus: '0.5'
          memory: 512M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    restart: unless-stopped
    labels:
      - "service=messaging"
      - "type=kafka"

  # User Service
  user-service:
    build:
      context: .
      dockerfile: services/Dockerfile
      target: user-service
    container_name: user-service
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-admin}:${POSTGRES_PASSWORD:-secret}@postgres-db:5432/${POSTGRES_DB:-project_management}
      - SECRET_KEY=${SECRET_KEY:-your-secret-key}
      - USER_SERVICE_URL=http://user-service:8000
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD:-redispass}
      - REDIS_TTL=3600
      - DEBUG=${DEBUG:-false}
      - ENVIRONMENT=${ENVIRONMENT:-production}
    ports:
      - "8000:8000"
    volumes:
      - ./services/user_service:/app/user_service
      - ./services/utils:/app/utils
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - app-network
    depends_on:
      postgres-db:
        condition: service_healthy
      redis:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    restart: unless-stopped
    labels:
      - "service=application"
      - "type=user-service"

  # Project Service
  project-service:
    build:
      context: .
      dockerfile: services/Dockerfile
      target: project-service
    container_name: project-service
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-admin}:${POSTGRES_PASSWORD:-secret}@postgres-db:5432/${POSTGRES_DB:-project_management}
      - SECRET_KEY=${SECRET_KEY:-your-secret-key}
      - USER_SERVICE_URL=http://user-service:8000
      - PROJECT_SERVICE_URL=http://project-service:8001
      - DEBUG=${DEBUG:-false}
      - ENVIRONMENT=${ENVIRONMENT:-production}
    ports:
      - "8001:8001"
    volumes:
      - ./services/project_service:/app/project_service
      - ./services/utils:/app/utils
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - app-network
    depends_on:
      postgres-db:
        condition: service_healthy
      user-service:
        condition: service_started
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    restart: unless-stopped
    labels:
      - "service=application"
      - "type=project-service"

  # Task Service
  task-service:
    build:
      context: .
      dockerfile: services/Dockerfile
      target: task-service
    container_name: task-service
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-admin}:${POSTGRES_PASSWORD:-secret}@postgres-db:5432/${POSTGRES_DB:-project_management}
      - MONGODB_URL=mongodb://${MONGO_USER:-mongoadmin}:${MONGO_PASSWORD:-mongopass}@mongodb:27017/${MONGO_DB:-task_service}?authSource=admin
      - MONGODB_DB_NAME=${MONGO_DB:-task_service}
      - SECRET_KEY=${SECRET_KEY:-your-secret-key}
      - USER_SERVICE_URL=http://user-service:8000
      - PROJECT_SERVICE_URL=http://project-service:8001
      - TASK_SERVICE_URL=http://task-service:8002
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - KAFKA_TASK_TOPIC=${KAFKA_TASK_TOPIC:-task_events}
      - DEBUG=${DEBUG:-false}
      - ENVIRONMENT=${ENVIRONMENT:-production}
    ports:
      - "8002:8002"
    volumes:
      - ./services/task_service:/app/task_service
      - ./services/utils:/app/utils
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - app-network
    depends_on:
      postgres-db:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      kafka:
        condition: service_healthy
      user-service:
        condition: service_started
      project-service:
        condition: service_started
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    restart: unless-stopped
    labels:
      - "service=application"
      - "type=task-service"

  # Task Event Handler Service
  task-event-handler:
    build:
      context: .
      dockerfile: services/Dockerfile
      target: task-event-handler
    container_name: task-event-handler
    environment:
      - MONGODB_URL=mongodb://${MONGO_USER:-mongoadmin}:${MONGO_PASSWORD:-mongopass}@mongodb:27017/${MONGO_DB:-task_service}?authSource=admin
      - MONGODB_DB_NAME=${MONGO_DB:-task_service}
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - KAFKA_TASK_TOPIC=${KAFKA_TASK_TOPIC:-task_events}
      - KAFKA_CONSUMER_GROUP=${KAFKA_CONSUMER_GROUP:-task_handler_group}
      - DEBUG=${DEBUG:-false}
      - ENVIRONMENT=${ENVIRONMENT:-production}
    networks:
      - app-network
    depends_on:
      kafka:
        condition: service_healthy
      mongodb:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
    restart: unless-stopped
    labels:
      - "service=application"
      - "type=task-event-handler"
    command: ["python", "-m", "task_service.src.events.event_handler"]

networks:
  app-network:
    driver: bridge
    name: project-management-network
    labels:
      - "project=project-management-system"

volumes:
  postgres_data:
    name: project-management-postgres-data
    labels:
      - "type=postgres"
      - "data=persistent"
  mongo_data:
    name: project-management-mongo-data
    labels:
      - "type=mongodb"
      - "data=persistent"
  redis_data:
    name: project-management-redis-data
    labels:
      - "type=redis"
      - "data=persistent"
  kafka_data:
    name: project-management-kafka-data
    labels:
      - "type=kafka"
      - "data=persistent"
  zookeeper_data:
    name: project-management-zookeeper-data
    labels:
      - "type=zookeeper"
      - "data=persistent"
  zookeeper_log:
    name: project-management-zookeeper-log
    labels:
      - "type=zookeeper"
      - "data=logs"