#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# Path: reasoning-service/src/cot/optimizer.py
from typing import List, Dict, Tuple, Set, Any
from dataclasses import dataclass
from .processor import ThoughtStep, ActionType
import numpy as np
import time


@dataclass
class OptimizationMetrics:
    """
    Description:
        –ú–µ—Ç—Ä–∏–∫–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ü–µ–ø–æ—á–∫–∏ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–π.

    Attributes:
        coherence: –°–≤—è–∑–Ω–æ—Å—Ç—å —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–π.
        relevance: –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç—É.
        depth: –ì–ª—É–±–∏–Ω–∞ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–π.
        breadth: –®–∏—Ä–æ—Ç–∞ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–π.
        overall_score: –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ —Ü–µ–ø–æ—á–∫–∏.
    """
    coherence: float
    relevance: float
    depth: float
    breadth: float
    overall_score: float


class ChainOptimizer:
    """
    Description:
        –û–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä —Ü–µ–ø–æ—á–µ–∫ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–π.
        –£–ª—É—á—à–∞–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ –∏ —Å–≤—è–∑–Ω–æ—Å—Ç—å —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–π.

    Attributes:
        weights: –í–µ—Å–∞ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –æ–±—â–µ–π –æ—Ü–µ–Ω–∫–∏.
    """

    def __init__(self,
                 coherence_weight: float = 0.3,
                 relevance_weight: float = 0.3,
                 depth_weight: float = 0.2,
                 breadth_weight: float = 0.2):
        """
        Description:
            –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä–∞.

        Args:
            coherence_weight: –í–µ—Å —Å–≤—è–∑–Ω–æ—Å—Ç–∏.
            relevance_weight: –í–µ—Å —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏.
            depth_weight: –í–µ—Å –≥–ª—É–±–∏–Ω—ã.
            breadth_weight: –í–µ—Å —à–∏—Ä–æ—Ç—ã.
        """
        self.weights = {
            'coherence': coherence_weight,
            'relevance': relevance_weight,
            'depth': depth_weight,
            'breadth': breadth_weight
        }

    def optimize_chain(self,
                       chain: List[ThoughtStep],
                       context: Dict[str, Any]) -> Tuple[List[ThoughtStep], OptimizationMetrics]:
        """
        Description:
            –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ü–µ–ø–æ—á–∫–∏ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–π.

        Args:
            chain: –ò—Å—Ö–æ–¥–Ω–∞—è —Ü–µ–ø–æ—á–∫–∞ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–π.
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏.

        Returns:
            –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ü–µ–ø–æ—á–∫–∞ –∏ –º–µ—Ç—Ä–∏–∫–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏.
        """
        # –û—Ü–µ–Ω–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        current_metrics = self._evaluate_chain(chain, context)

        # –ü–æ–ø—ã—Ç–∫–∞ —É–ª—É—á—à–µ–Ω–∏—è —Ü–µ–ø–æ—á–∫–∏
        improved_chain = self._improve_chain(chain, current_metrics, context)

        # –û—Ü–µ–Ω–∫–∞ —É–ª—É—á—à–µ–Ω–Ω–æ–π —Ü–µ–ø–æ—á–∫–∏
        final_metrics = self._evaluate_chain(improved_chain, context)

        return improved_chain, final_metrics

    def _evaluate_chain(self, chain: List[ThoughtStep], context: Dict[str, Any]) -> OptimizationMetrics:
        """
        Description:
            –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ —Ü–µ–ø–æ—á–∫–∏ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–π.

        Args:
            chain: –¶–µ–ø–æ—á–∫–∞ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–π.
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏.

        Returns:
            –ú–µ—Ç—Ä–∏–∫–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏.
        """
        print("\nüìä –û—Ü–µ–Ω–∫–∞ —Ü–µ–ø–æ—á–∫–∏ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–π...")
        print("=" * 80)

        coherence = self._evaluate_coherence(chain)
        print(f"üìà –°–≤—è–∑–Ω–æ—Å—Ç—å: {coherence:.2f}")

        relevance = self._evaluate_relevance(chain, context)
        print(f"üéØ –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {relevance:.2f}")

        depth = self._evaluate_depth(chain)
        print(f"üîç –ì–ª—É–±–∏–Ω–∞: {depth:.2f}")

        breadth = self._evaluate_breadth(chain)
        print(f"üåê –®–∏—Ä–æ—Ç–∞: {breadth:.2f}")

        overall_score = (
            self.weights['coherence'] * coherence +
            self.weights['relevance'] * relevance +
            self.weights['depth'] * depth +
            self.weights['breadth'] * breadth
        )

        print(f"‚≠ê –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞: {overall_score:.2f}")

        return OptimizationMetrics(
            coherence=coherence,
            relevance=relevance,
            depth=depth,
            breadth=breadth,
            overall_score=overall_score
        )

    def _improve_chain(self,
                       chain: List[ThoughtStep],
                       current_metrics: OptimizationMetrics,
                       context: Dict[str, Any]) -> List[ThoughtStep]:
        """
        Description:
            –£–ª—É—á—à–µ–Ω–∏–µ —Ü–µ–ø–æ—á–∫–∏ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–π.

        Args:
            chain: –ò—Å—Ö–æ–¥–Ω–∞—è —Ü–µ–ø–æ—á–∫–∞ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–π.
            current_metrics: –¢–µ–∫—É—â–∏–µ –º–µ—Ç—Ä–∏–∫–∏.
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏.

        Returns:
            –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ü–µ–ø–æ—á–∫–∞.
        """
        print("\nüîÑ –ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —É–ª—É—á—à–µ–Ω–∏—è —Ü–µ–ø–æ—á–∫–∏...")
        improved_chain = chain.copy()

        # –£–ª—É—á—à–µ–Ω–∏–µ —Å–≤—è–∑–Ω–æ—Å—Ç–∏
        if current_metrics.coherence < 0.7:
            print("\nüìà –¢—Ä–µ–±—É–µ—Ç—Å—è —É–ª—É—á—à–µ–Ω–∏–µ —Å–≤—è–∑–Ω–æ—Å—Ç–∏...")
            improved_chain = self._improve_coherence(improved_chain)

        # –£–ª—É—á—à–µ–Ω–∏–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
        if current_metrics.relevance < 0.7:
            print("\nüéØ –¢—Ä–µ–±—É–µ—Ç—Å—è —É–ª—É—á—à–µ–Ω–∏–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏...")
            improved_chain = self._improve_relevance(improved_chain, context)

        # –£–ª—É—á—à–µ–Ω–∏–µ –≥–ª—É–±–∏–Ω—ã
        if current_metrics.depth < 0.5:
            print("\nüîç –¢—Ä–µ–±—É–µ—Ç—Å—è —É–ª—É—á—à–µ–Ω–∏–µ –≥–ª—É–±–∏–Ω—ã...")
            improved_chain = self._improve_depth(improved_chain, context)

        # –£–ª—É—á—à–µ–Ω–∏–µ —à–∏—Ä–æ—Ç—ã
        if current_metrics.breadth < 0.5:
            print("\nüåê –¢—Ä–µ–±—É–µ—Ç—Å—è —É–ª—É—á—à–µ–Ω–∏–µ —à–∏—Ä–æ—Ç—ã...")
            improved_chain = self._improve_breadth(improved_chain, context)

        print("\n‚ú® –ü—Ä–æ—Ü–µ—Å—Å —É–ª—É—á—à–µ–Ω–∏—è —Ü–µ–ø–æ—á–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω")
        return improved_chain

    def _evaluate_coherence(self, chain: List[ThoughtStep]) -> float:
        """
        Description:
            –û—Ü–µ–Ω–∫–∞ —Å–≤—è–∑–Ω–æ—Å—Ç–∏ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–π.

        Args:
            chain: –¶–µ–ø–æ—á–∫–∞ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–π.

        Returns:
            –û—Ü–µ–Ω–∫–∞ —Å–≤—è–∑–Ω–æ—Å—Ç–∏.
        """
        if len(chain) <= 1:
            return 1.0

        coherence_scores = []
        for i in range(1, len(chain)):
            prev_step = chain[i - 1]
            curr_step = chain[i]
            # TODO: –ò–º–ø–ª–µ–º–µ–Ω—Ç–∞—Ü–∏—è –æ—Ü–µ–Ω–∫–∏ —Å–≤—è–∑–Ω–æ—Å—Ç–∏ –º–µ–∂–¥—É —à–∞–≥–∞–º–∏
            score = 0.8  # Placeholder
            coherence_scores.append(score)

        return np.mean(coherence_scores)

    def _evaluate_relevance(self, chain: List[ThoughtStep], context: Dict[str, Any]) -> float:
        """
        Description:
            –û—Ü–µ–Ω–∫–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç—É.

        Args:
            chain: –¶–µ–ø–æ—á–∫–∞ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–π.
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏.

        Returns:
            –û—Ü–µ–Ω–∫–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏.
        """
        relevance_scores = []
        for step in chain:
            # TODO: –ò–º–ø–ª–µ–º–µ–Ω—Ç–∞—Ü–∏—è –æ—Ü–µ–Ω–∫–∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
            score = 0.7  # Placeholder
            relevance_scores.append(score)

        return np.mean(relevance_scores)

    def _evaluate_depth(self, chain: List[ThoughtStep]) -> float:
        """
        Description:
            –û—Ü–µ–Ω–∫–∞ –≥–ª—É–±–∏–Ω—ã —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–π.

        Args:
            chain: –¶–µ–ø–æ—á–∫–∞ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–π.

        Returns:
            –û—Ü–µ–Ω–∫–∞ –≥–ª—É–±–∏–Ω—ã.
        """
        if not chain:
            return 0.0

        depth_score = 0.0

        # –û—Ü–µ–Ω–∫–∞ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —à–∞–≥–æ–≤ (–º–∞–∫—Å–∏–º—É–º 10 —à–∞–≥–æ–≤)
        steps_score = min(1.0, len(chain) / 10)

        # –û—Ü–µ–Ω–∫–∞ –ø–æ —Ä–∞–∑–≤–∏—Ç–∏—é –∏–¥–µ–π
        idea_development = 0.0
        for i in range(1, len(chain)):
            prev_thought = chain[i - 1].content
            curr_thought = chain[i].content
            novelty = self._evaluate_novelty(prev_thought, curr_thought)
            idea_development += novelty

        if len(chain) > 1:
            idea_development /= (len(chain) - 1)

        # –û—Ü–µ–Ω–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –¥–µ–π—Å—Ç–≤–∏–π
        action_types = set(step.action_type for step in chain)
        action_diversity = len(action_types) / len(ActionType)

        # –í–∑–≤–µ—à–µ–Ω–Ω–∞—è —Å—É–º–º–∞ –≤—Å–µ—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤
        depth_score = (
            0.4 * steps_score +
            0.4 * idea_development +
            0.2 * action_diversity
        )

        return min(1.0, depth_score)

    def _evaluate_novelty(self, prev_thought: str, curr_thought: str) -> float:
        """
        Description:
            –û—Ü–µ–Ω–∫–∞ –Ω–æ–≤–∏–∑–Ω—ã –º—ã—Å–ª–∏.

        Args:
            prev_thought: –ü—Ä–µ–¥—ã–¥—É—â–∞—è –º—ã—Å–ª—å.
            curr_thought: –¢–µ–∫—É—â–∞—è –º—ã—Å–ª—å.

        Returns:
            –û—Ü–µ–Ω–∫–∞ –Ω–æ–≤–∏–∑–Ω—ã.
        """
        prompt = f"""
        –û—Ü–µ–Ω–∏—Ç–µ, –Ω–∞—Å–∫–æ–ª—å–∫–æ –≤—Ç–æ—Ä–∞—è –º—ã—Å–ª—å –¥–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∫ –ø–µ—Ä–≤–æ–π.

        –ü–µ—Ä–≤–∞—è –º—ã—Å–ª—å: {prev_thought}
        –í—Ç–æ—Ä–∞—è –º—ã—Å–ª—å: {curr_thought}

        –û—Ü–µ–Ω–∏—Ç–µ –ø–æ —à–∫–∞–ª–µ –æ—Ç 0 –¥–æ 1, –≥–¥–µ:
        0 - –ø–æ–ª–Ω–æ–µ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ
        1 - –ø–æ–ª–Ω–æ—Å—Ç—å—é –Ω–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è

        –í–µ—Ä–Ω–∏—Ç–µ —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ.
        """

        try:
            response = float(self.thought_evaluator(prompt).strip())
            return max(0.0, min(1.0, response))
        except:
            return 0.5

    def _evaluate_breadth(self, chain: List[ThoughtStep]) -> float:
        """
        Description:
            –û—Ü–µ–Ω–∫–∞ —à–∏—Ä–æ—Ç—ã —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–π.

        Args:
            chain: –¶–µ–ø–æ—á–∫–∞ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–π.

        Returns:
            –û—Ü–µ–Ω–∫–∞ —à–∏—Ä–æ—Ç—ã.
        """
        if not chain:
            return 0.0

        breadth_score = 0.0

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ –∏–∑ –≤—Å–µ—Ö –º—ã—Å–ª–µ–π
        all_concepts = set()
        for step in chain:
            concepts = self._extract_concepts(step.content)
            all_concepts.update(concepts)

        # –û—Ü–µ–Ω–∫–∞ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–æ–Ω—Ü–µ–ø—Ü–∏–π
        concept_score = min(1.0, len(all_concepts) / 10)

        # –û—Ü–µ–Ω–∫–∞ –ø–æ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—é –ø–æ–¥—Ö–æ–¥–æ–≤
        perspectives = self._analyze_perspectives(chain)
        perspective_score = min(1.0, len(perspectives) / 5)

        # –û—Ü–µ–Ω–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –≥—Ä–∞—Ñ–∞
        graph_usage = sum(1 for step in chain if step.action_type != ActionType.THINK)
        graph_score = min(1.0, graph_usage / len(chain))

        # –í–∑–≤–µ—à–µ–Ω–Ω–∞—è —Å—É–º–º–∞ –≤—Å–µ—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤
        breadth_score = (
            0.4 * concept_score +
            0.4 * perspective_score +
            0.2 * graph_score
        )

        return breadth_score

    def _extract_concepts(self, thought: str) -> Set[str]:
        """
        Description:
            –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã—Ö –∫–æ–Ω—Ü–µ–ø—Ü–∏–π –∏–∑ –º—ã—Å–ª–∏.

        Args:
            thought: –¢–µ–∫—É—â–∞—è –º—ã—Å–ª—å.

        Returns:
            –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –∫–ª—é—á–µ–≤—ã—Ö –∫–æ–Ω—Ü–µ–ø—Ü–∏–π.
        """
        prompt = f"""
        –ò–∑–≤–ª–µ–∫–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ –∏–∑ —Å–ª–µ–¥—É—é—â–µ–π –º—ã—Å–ª–∏:
        {thought}

        –í–µ—Ä–Ω–∏—Ç–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ –∑–∞–ø—è—Ç—ã–º–∏.
        """

        try:
            response = self.thought_evaluator(prompt)
            concepts = {c.strip() for c in response.split(',')}
            return concepts
        except:
            return set()

    def _analyze_perspectives(self, chain: List[ThoughtStep]) -> Set[str]:
        """
        Description:
            –ê–Ω–∞–ª–∏–∑ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –ø–æ–¥—Ö–æ–¥–æ–≤ –≤ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–∏.

        Args:
            chain: –¶–µ–ø–æ—á–∫–∞ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–π.

        Returns:
            –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –ø–æ–¥—Ö–æ–¥–æ–≤.
        """
        prompt = f"""
        –û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ —Ä–∞–∑–ª–∏—á–Ω—ã–µ –ø–æ–¥—Ö–æ–¥—ã/–ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–∏:
        {' '.join(step.content for step in chain)}

        –í–µ—Ä–Ω–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—ã –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã–µ –∑–∞–ø—è—Ç—ã–º–∏.
        """

        try:
            response = self.thought_evaluator(prompt)
            perspectives = {p.strip() for p in response.split(',')}
            return perspectives
        except:
            return set()

    def _improve_coherence(self, chain: List[ThoughtStep]) -> List[ThoughtStep]:
        """
        Description:
            –£–ª—É—á—à–µ–Ω–∏–µ —Å–≤—è–∑–Ω–æ—Å—Ç–∏ —Ü–µ–ø–æ—á–∫–∏ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–π.

        Args:
            chain: –ò—Å—Ö–æ–¥–Ω–∞—è —Ü–µ–ø–æ—á–∫–∞ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–π.

        Returns:
            –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ü–µ–ø–æ—á–∫–∞.
        """
        print("\nüîÑ –£–ª—É—á—à–µ–Ω–∏–µ —Å–≤—è–∑–Ω–æ—Å—Ç–∏ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–π...")
        improved_chain = chain.copy()

        # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ —Ü–µ–ø–æ—á–∫–µ –∏ —É–ª—É—á—à–∞–µ–º —Å–≤—è–∑–Ω–æ—Å—Ç—å –º–µ–∂–¥—É –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–º–∏ –º—ã—Å–ª—è–º–∏
        for i in range(1, len(improved_chain)):
            prev_step = improved_chain[i - 1]
            curr_step = improved_chain[i]

            # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —Å–≤—è–∑–Ω–æ—Å—Ç–∏
            curr_step.metadata.update({
                "improved_coherence": True,
                "parent_step": prev_step.content[:100],  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π —à–∞–≥
                "coherence_timestamp": time.time()
            })

            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏–π —à–∞–≥
            if prev_step.content not in curr_step.references:
                curr_step.references.append(prev_step.content)

        print(f"‚úÖ –£–ª—É—á—à–µ–Ω–∞ —Å–≤—è–∑–Ω–æ—Å—Ç—å –¥–ª—è {len(improved_chain)} —à–∞–≥–æ–≤")
        return improved_chain

    def _improve_relevance(self, chain: List[ThoughtStep], context: Dict[str, Any]) -> List[ThoughtStep]:
        """
        Description:
            –£–ª—É—á—à–µ–Ω–∏–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–π –∫–æ–Ω—Ç–µ–∫—Å—Ç—É.

        Args:
            chain: –ò—Å—Ö–æ–¥–Ω–∞—è —Ü–µ–ø–æ—á–∫–∞ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–π.
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏.

        Returns:
            –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ü–µ–ø–æ—á–∫–∞.
        """
        print("\nüéØ –£–ª—É—á—à–µ–Ω–∏–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ –∫ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É...")
        improved_chain = chain.copy()

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –∫–∞–∂–¥–æ–≥–æ —à–∞–≥–∞
        for step in improved_chain:
            step.metadata.update({
                "context_background": context.get('background', ''),
                "improved_relevance": True,
                "relevance_timestamp": time.time()
            })

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Å—ã–ª–∫–∏ —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            if context.get('background') and context['background'] not in step.references:
                step.references.append(context['background'])

        print(f"‚úÖ –£–ª—É—á—à–µ–Ω–∞ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å –¥–ª—è {len(improved_chain)} —à–∞–≥–æ–≤")
        return improved_chain

    def _improve_depth(self, chain: List[ThoughtStep], context: Dict[str, Any]) -> List[ThoughtStep]:
        """
        Description:
            –£–ª—É—á—à–µ–Ω–∏–µ –≥–ª—É–±–∏–Ω—ã —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–π.

        Args:
            chain: –ò—Å—Ö–æ–¥–Ω–∞—è —Ü–µ–ø–æ—á–∫–∞ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–π.
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏.

        Returns:
            –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ü–µ–ø–æ—á–∫–∞.
        """
        print("\nüîç –£–ª—É—á—à–µ–Ω–∏–µ –≥–ª—É–±–∏–Ω—ã —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–π...")
        improved_chain = chain.copy()

        for step in improved_chain:
            # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –æ –≥–ª—É–±–∏–Ω–µ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏—è
            step.metadata.update({
                "depth_level": len(step.references),  # –£—Ä–æ–≤–µ–Ω—å –≥–ª—É–±–∏–Ω—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Å—ã–ª–æ–∫
                "improved_depth": True,
                "depth_timestamp": time.time()
            })

            # –†–∞—Å—à–∏—Ä—è–µ–º —Å—Å—ã–ª–∫–∏ –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è –≥–ª—É–±–∏–Ω—ã
            if "depth_references" not in step.metadata:
                step.metadata["depth_references"] = []

            step.metadata["depth_references"].extend([
                ref for ref in chain[-3:]
                if ref.content not in step.metadata["depth_references"]
            ])

        print(f"‚úÖ –£–ª—É—á—à–µ–Ω–∞ –≥–ª—É–±–∏–Ω–∞ –¥–ª—è {len(improved_chain)} —à–∞–≥–æ–≤")
        return improved_chain

    def _improve_breadth(self, chain: List[ThoughtStep], context: Dict[str, Any]) -> List[ThoughtStep]:
        """
        Description:
            –£–ª—É—á—à–µ–Ω–∏–µ —à–∏—Ä–æ—Ç—ã —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–π.

        Args:
            chain: –ò—Å—Ö–æ–¥–Ω–∞—è —Ü–µ–ø–æ—á–∫–∞ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–π.
            context: –ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏.

        Returns:
            –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ü–µ–ø–æ—á–∫–∞.
        """
        print("\nüåê –£–ª—É—á—à–µ–Ω–∏–µ —à–∏—Ä–æ—Ç—ã —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–π...")
        improved_chain = chain.copy()

        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ –∏–∑ —Ü–µ–ø–æ—á–∫–∏
        all_concepts = set()
        for step in chain:
            all_concepts.update(step.references)

        # –û–±–æ–≥–∞—â–∞–µ–º –∫–∞–∂–¥—ã–π —à–∞–≥ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏
        for step in improved_chain:
            step.metadata.update({
                "breadth_concepts": list(all_concepts),
                "improved_breadth": True,
                "breadth_timestamp": time.time()
            })

            # –î–æ–±–∞–≤–ª—è–µ–º —Å–≤—è–∑–∏ —Å –¥—Ä—É–≥–∏–º–∏ –∫–æ–Ω—Ü–µ–ø—Ü–∏—è–º–∏
            for concept in all_concepts:
                if concept not in step.references and concept != step.content:
                    step.references.append(concept)

        print(f"‚úÖ –£–ª—É—á—à–µ–Ω–∞ —à–∏—Ä–æ—Ç–∞ –¥–ª—è {len(improved_chain)} —à–∞–≥–æ–≤")
        return improved_chain