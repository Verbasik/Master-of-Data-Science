#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# Adapter Text Generation Inference
# Path: reasoning-service/src/cot/llm_adapter.py

# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–∏–ø–∞–º–∏
from typing import List

# –ò–º–ø–æ—Ä—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫ LangChain
from langchain_openai import ChatOpenAI
from langchain_core.messages import BaseMessage, HumanMessage, SystemMessage

class TGI_Adapter:
    """
    Description:
        –ö–ª–∞—Å—Å –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –º–æ–¥–µ–ª—å—é ChatOpenAI.
    """
    
    def __init__(self, system_prompt: str, temperature: float, n: int, top_p: float, max_tokens: int, streaming: bool):
        """
        Description:
            –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä TGI_Adapter.
        
        Args:
            system_prompt: –ù–∞—á–∞–ª—å–Ω—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –º–æ–¥–µ–ª–∏.
            temperature: –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞.
            n: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π.
            top_p: –ü–æ—Ä–æ–≥ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Ö –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏.
            max_tokens: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤.
            streaming: –í–∫–ª—é—á–∏—Ç—å –ø–æ—Ç–æ–∫–æ–≤—ã–π —Ä–µ–∂–∏–º –≤—ã–≤–æ–¥–∞.
        """
        self.system_prompt = system_prompt
        
        self.client = ChatOpenAI(
            base_url='',
            api_key="-",
            model='/meta-llama/Meta-Llama-3.1-70B-Instruct',
            temperature=temperature,
            n=n,
            top_p=top_p,
            max_tokens=max_tokens,
            streaming=streaming
        )
    
    def __call__(self, message: str) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç –º–æ–¥–µ–ª–∏."""
        print("\nü§ñ –ó–∞–ø—Ä–æ—Å –∫ —è–∑—ã–∫–æ–≤–æ–π –º–æ–¥–µ–ª–∏...")
        print("-" * 80)
        print("üìù –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç:", self.system_prompt)
        print("üí≠ –°–æ–æ–±—â–µ–Ω–∏–µ:", message)
        
        messages = [
            SystemMessage(content=self.system_prompt),
            HumanMessage(content=message)
        ]
        
        try:
            print("\n‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞...")
            response = self.client.invoke(messages)
            print("\nü§ñ –û—Ç–≤–µ—Ç –º–æ–¥–µ–ª–∏:", response)
            return response.content
        except Exception as e:
            print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ –º–æ–¥–µ–ª–∏: {e}")
            raise