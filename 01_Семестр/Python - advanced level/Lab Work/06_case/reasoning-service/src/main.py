import os
import json
import logging
from typing import List, Dict, Optional, Any

from cot.processor import ChainOfThoughtProcessor, ThoughtStep, ActionType
from cot.optimizer import ChainOptimizer
from cot.llm_adapter import TGI_Adapter
from cot.graph.generator import ensure_test_graph

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


class ReasoningService:
    """
    Description:
        –û—Å–Ω–æ–≤–Ω–æ–π —Å–µ—Ä–≤–∏—Å –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Chain of Thought.

    Attributes:
        thought_generator: –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –º—ã—Å–ª–µ–π.
        processor: –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä Chain of Thought.
        optimizer: –û–ø—Ç–∏–º–∏–∑–∞—Ç–æ—Ä —Ü–µ–ø–æ—á–∫–∏ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–π.
    """

    def __init__(self,
                 graph_path: str = None,
                 max_chain_length: int = 5,
                 min_confidence: float = 0.6,
                 cache_dir: str = ".cache",
                 use_gpu: bool = False):
        """
        Description:
            –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞.

        Args:
            graph_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –≥—Ä–∞—Ñ–æ–º.
            max_chain_length: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ —Ü–µ–ø–æ—á–∫–∏ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–π.
            min_confidence: –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –¥–ª—è —à–∞–≥–∞ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏—è.
            cache_dir: –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏—è.
            use_gpu: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–∏ GPU –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏–π.
        """
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è LLM –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º—ã—Å–ª–µ–π
        self.thought_generator = TGI_Adapter(
            system_prompt="""–í—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –ª–æ–≥–∏—á–µ—Å–∫–æ–º—É –º—ã—à–ª–µ–Ω–∏—é –∏ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏—è–º. 
            –í–∞—à–∞ –∑–∞–¥–∞—á–∞ - –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π –ª–æ–≥–∏—á–µ—Å–∫–∏–π —à–∞–≥ –≤ —Ü–µ–ø–æ—á–∫–µ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–π.
            –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∏ —É—á–∏—Ç—ã–≤–∞–π—Ç–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç.""",
            temperature=0.7,
            n=1,
            top_p=0.9,
            max_tokens=500,
            streaming=False
        )

        self.processor = ChainOfThoughtProcessor(
            max_chain_length=max_chain_length,
            min_confidence=min_confidence,
            cache_dir=cache_dir,
            use_gpu=use_gpu
        )
        self.optimizer = ChainOptimizer()

        # –ó–∞–≥—Ä—É–∑–∫–∞ –≥—Ä–∞—Ñ–∞, –µ—Å–ª–∏ —É–∫–∞–∑–∞–Ω –ø—É—Ç—å
        if graph_path:
            self.load_graph(graph_path)

    def load_graph(self, graph_path: str):
        """
        Description:
            –ó–∞–≥—Ä—É–∑–∫–∞ –≥—Ä–∞—Ñ–∞ –∏–∑ —Ñ–∞–π–ª–∞.

        Args:
            graph_path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É —Å –≥—Ä–∞—Ñ–æ–º.
        """
        logger.info(f"Loading graph from {graph_path}")
        try:
            with open(graph_path, 'r') as f:
                graph = json.load(f)
            self.processor.set_graph(graph)
            logger.info("Graph loaded successfully")
        except Exception as e:
            logger.error(f"Error loading graph: {e}")
            raise

    def _display_progress(self, message: str, progress: float = None):
        """
        Description:
            –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Å –≤–∏–∑—É–∞–ª—å–Ω—ã–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–º.

        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.
            progress: –ü—Ä–æ–≥—Ä–µ—Å—Å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 0 –¥–æ 1.
        """
        if progress is not None:
            bar_length = 40
            filled_length = int(bar_length * progress)
            bar = '=' * filled_length + '-' * (bar_length - filled_length)
            logger.info(f"[{bar}] {progress * 100:.1f}% | {message}")
        else:
            logger.info(message)

    def _display_thought(self, step_n: int, thought_step: ThoughtStep):
        """
        Description:
            –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —à–∞–≥–∞ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏—è.

        Args:
            step_n: –ù–æ–º–µ—Ä —à–∞–≥–∞.
            thought_step: –®–∞–≥ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏—è.
        """
        logger.info(f"\n{'=' * 80}")
        logger.info(f"–®–∞–≥ {step_n}: {thought_step.action_type.value.capitalize()}")
        logger.info(f"{'=' * 80}")

        # –í—ã–≤–æ–¥ –º—ã—Å–ª–∏
        logger.info(f"–ú—ã—Å–ª—å: {thought_step.content}")

        # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–µ–π—Å—Ç–≤–∏—è
        if thought_step.observation:
            logger.info(f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {thought_step.observation}")

        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
        conf_bar = '‚ñ†' * int(thought_step.confidence * 20)
        logger.info(f"–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: [{conf_bar:<20}] {thought_step.confidence:.2f}")

    def process_query(self, query: str, context: Optional[Dict] = None) -> Dict:
        """
        Description:
            –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Å –ø–æ—à–∞–≥–æ–≤—ã–º —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–µ–º –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞.

        Args:
            query: –ò—Å—Ö–æ–¥–Ω—ã–π –≤–æ–ø—Ä–æ—Å.
            context: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏—è.

        Returns:
            –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏—è, –≤–∫–ª—é—á–∞—è –ø–æ—à–∞–≥–æ–≤—ã–µ –º—ã—Å–ª–∏, –º–µ—Ç—Ä–∏–∫–∏ –∏ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç.
        """

        def _generate_final_answer(thoughts: List[ThoughtStep]) -> str:
            """
            Description:
                –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤—Å–µ—Ö —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–π.

            Args:
                thoughts: –°–ø–∏—Å–æ–∫ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–π.

            Returns:
                –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç.
            """
            prompt = f"""
            –ù–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—ã—Ö —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–π —Å–æ—Å—Ç–∞–≤—å—Ç–µ —Ñ–∏–Ω–∞–ª—å–Ω—ã–π, –∫–æ–º–ø–ª–µ–∫—Å–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å.

            –ò—Å—Ö–æ–¥–Ω—ã–π –≤–æ–ø—Ä–æ—Å: {query}

            –ü—Ä–æ–≤–µ–¥–µ–Ω–Ω—ã–µ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏—è:
            {' '.join([f"–®–∞–≥ {i + 1}: {t.content}" for i, t in enumerate(thoughts)])}

            –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º—É –æ—Ç–≤–µ—Ç—É:
            1. –û–±–æ–±—â–∏—Ç–µ –≤—Å–µ –∫–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã –∏–∑ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–π
            2. –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–π—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ª–æ–≥–∏—á–µ—Å–∫–∏
            3. –£–±–µ–¥–∏—Ç–µ—Å—å –≤ –ø–æ–ª–Ω–æ—Ç–µ –æ—Ç–≤–µ—Ç–∞
            4. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–∞—É—á–Ω–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏
            5. –°–¥–µ–ª–∞–π—Ç–µ –æ—Ç–≤–µ—Ç –ø–æ–Ω—è—Ç–Ω—ã–º –∏ —Ö–æ—Ä–æ—à–æ –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω–Ω—ã–º

            –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –≤–∫–ª—é—á–∞—Ç—å:
            - –ö—Ä–∞—Ç–∫–æ–µ –≤–≤–µ–¥–µ–Ω–∏–µ
            - –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ö–∞–Ω–∏–∑–º—ã –∏ –ø—Ä–∏–Ω—Ü–∏–ø—ã
            - –í–∞–∂–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã –∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
            - –ó–∞–∫–ª—é—á–µ–Ω–∏–µ

            –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:
            """

            return self.thought_generator(prompt).strip()

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        self._display_progress("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–π...", 0.0)

        if context is None:
            context = {
                "background": "General reasoning task",
                "requirements": ["logical", "structured", "detailed"]
            }

        try:
            # –ù–∞—á–∞–ª–æ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏—è
            logger.info("\nüìù –ù–∞—á–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å: %s", query)

            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º—ã—Å–ª–µ–π
            thoughts = []
            current_step = 1

            while current_step <= self.processor.max_chain_length:
                logger.info(f"\nü§î –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —à–∞–≥–∞ {current_step}...")

                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–ø–æ—á–∫—É –º—ã—Å–ª–µ–π
                current_chain = [t.content for t in thoughts]

                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â–∏–µ –º—ã—Å–ª–∏
                new_thoughts = self.processor.process_thought(
                    current_chain[-1] if current_chain else query,
                    context
                )

                progress = current_step / self.processor.max_chain_length
                self._display_progress(
                    f"–®–∞–≥ {current_step}: –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {len(new_thoughts)} –º—ã—Å–ª–µ–π",
                    progress
                )

                if new_thoughts:
                    # –ë–µ—Ä–µ–º –ª—É—á—à—É—é –º—ã—Å–ª—å –ø–æ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏
                    best_thought = max(new_thoughts, key=lambda x: x.confidence)
                    thoughts.append(best_thought)
                    self._display_thought(current_step, best_thought)

                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
                    if best_thought.action_type == ActionType.CONCLUDE:
                        break

                current_step += 1

            # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è
            logger.info("\nüîÑ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ü–µ–ø–æ—á–∫–∏ —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–π...")
            optimized_chain, metrics = self.optimizer.optimize_chain(thoughts, context)
            self._display_progress("–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞", 1.0)

            # –í—ã–≤–æ–¥ –º–µ—Ç—Ä–∏–∫
            logger.info("\nüìä –ú–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞:")
            logger.info("=" * 40)
            for metric, value in metrics.__dict__.items():
                bar = '‚ñ†' * int(value * 20)
                logger.info(f"{metric:15}: [{bar:<20}] {value:.2f}")

            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
            logger.info("\nüéØ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞...")
            final_answer = _generate_final_answer(optimized_chain)

            # –í—ã–≤–æ–¥ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
            logger.info("\nüìù –§–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:")
            logger.info("=" * 80)
            logger.info(final_answer)
            logger.info("=" * 80)

            return {
                "original_query": query,
                "reasoning_steps": [
                    {
                        "content": t.content,
                        "confidence": t.confidence,
                        "action_type": t.action_type.value,
                        "observation": t.observation,
                        "metadata": t.metadata
                    }
                    for t in optimized_chain
                ],
                "metrics": metrics.__dict__,
                "final_answer": final_answer,
                "success": True
            }

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
            return {
                "error": "Failed to process query",
                "message": str(e),
                "success": False
            }


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å–µ—Ä–≤–∏—Å–∞."""
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç–∏ –¥–ª—è —Ñ–∞–π–ª–æ–≤
    base_dir = os.path.dirname(os.path.abspath(__file__))
    graph_path = os.path.join(base_dir, "data", "test_graph.json")
    cache_dir = os.path.join(base_dir, ".cache")

    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –≥—Ä–∞—Ñ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    graph_path = ensure_test_graph(graph_path)

    # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å
    service = ReasoningService(
        graph_path=graph_path,
        cache_dir=cache_dir,
        use_gpu=True
    )

    logger.info("\n" + "=" * 80)
    logger.info("ü§ñ Chain of Thought Reasoning with Graph Support".center(80))
    logger.info("=" * 80 + "\n")

    try:
        # –ü—Ä–∏–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞
        query = """
        –ó–∞–¥–∞—á–∞: –†–∞–∑—Ä–∞–±–æ—Ç–∞—Ç—å –∞–ª–≥–æ—Ä–∏—Ç–º –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π –∏ –º–∞—Ä—à—Ä—É—Ç–æ–≤ –¥–ª—è —Ñ–ª–æ—Ç–∞ –≥—Ä—É–∑–æ–≤—ã—Ö –¥—Ä–æ–Ω–æ–≤, 
        –º–∏–Ω–∏–º–∏–∑–∏—Ä—É—é—â–∏–π —Å–æ–≤–æ–∫—É–ø–Ω—ã–µ –∏–∑–¥–µ—Ä–∂–∫–∏ –∏ –≤—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏ –ø—Ä–∏ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –º–µ–Ω—è—é—â–∏—Ö—Å—è —Ç–∞—Ä–∏—Ñ–∞—Ö, –∏ –ø–æ–∫–∞–∑–∞—Ç—å, 
        —á—Ç–æ –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è –∑–∞–¥–∞—á–∞ –∫–æ–º–º–∏–≤–æ—è–∂—ë—Ä–∞ (TSP) —è–≤–ª—è–µ—Ç—Å—è –ª–∏—à—å –µ—ë —á–∞—Å—Ç–Ω—ã–º —Å–ª—É—á–∞–µ–º.
        """

        logger.info("\nüîÑ –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Ä–∞—Å—Å—É–∂–¥–µ–Ω–∏–π...\n")
        result = service.process_query(query)

        if "error" not in result:
            logger.info("\n–£—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        else:
            logger.error(f"\n–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {result['message']}")

    except KeyboardInterrupt:
        logger.info("\n\nüëã –ü—Ä–æ–≥—Ä–∞–º–º–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
    except Exception as e:
        logger.error(f"\n‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}")
        logger.info("–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")


if __name__ == "__main__":
    main()